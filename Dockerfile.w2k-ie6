################################################################################
#
# This image build script is incomplete:
#
# - auto logon doesn't work (set password and reg fix?)
# - need to complete internet connection setup wizard (reg fix?)
# - IEDriverServer requires additional fixes to be stable
# - (optional) get rid of Window XP reg.exe file
# - (optional) separate windows 2000 and windows xp support files
# - (optional) install gdiplus.dll from provided by MS installer
#
# Prerequisites (current version):
#
# - gdiplus_kb975337.zip with gdiplus.dll extracted from
#   https://download.microsoft.com/download/a/b/c/abc45517-97a0-4cee-a362-1957be2f24e1/WindowsXP-KB975337-x86-ENU.exe
# - ie6sp1en.zip with ie6sp1en folder containing ie6setup.exe and other files
#   downloaded from https://archive.org/download/IE6SP1/IE6%20SP1.zip
# - IEDriverServer_Win32_2.40.0_w2k_1.0.zip - archived IEDriverServer.exe
#   built from https://github.com/sormy/selenium-w2k using Visual Studio 2008 Pro
# - jre-6-windows-i586.exe downloaded from Oracle website (free registration required)
# - psshutdown.zip - archived psshutdown.exe extracted from PsTools
#   https://download.sysinternals.com/files/PSTools.zip
# - reg_wxp32sp3en.zip - archived reg.exe grabbed from Windows XP Pro SP3.
# - en_win2000_pro_sp4.iso - Windows 2000 SP4 Pro English ISO.
#
# Workarounds:
#
# - reg.exe is not available on Windows 2000, copied from Windows XP.
# - shutdown.exe is not available on Windows 2000, psshutdown.exe is used instead.
# - IEDriverServer never worked on Windows 2000, partially fixed here:
#   https://github.com/sormy/selenium-w2k
# - Java 6 is the latest Java available for Windows 2000, the latest compatible
#   Selenium Server is v2.40.0.
#
# Notes:
#
# - Windows Installer 2.0 doesn't support /passive /norestart.
#   https://download.microsoft.com/download/1/4/7/147ded26-931c-4daf-9095-ec7baf996f46/WindowsInstaller-KB893803-v2-x86.exe
#   WindowsInstaller-KB893803-v2-x86.exe /passive /norestart
#
################################################################################

FROM amazonlinux

LABEL maintainer="art.sormy@gmail.com"

# windows options
ARG PRODUCT_KEY
ARG FULL_NAME=oldie
ARG ORG_NAME=oldie
ARG COMPUTER_NAME=OLDIE-PC

# qemu options
ARG QEMU_RAM=512
ENV QEMU_RAM=${QEMU_RAM}
ARG QEMU_VGA=cirrus
ENV QEMU_VGA=${QEMU_VGA}
ARG QEMU_NET=rtl8139
ENV QEMU_NET=${QEMU_NET}
ARG QEMU_DISK=ide
ENV QEMU_DISK=${QEMU_DISK}

# selenium server options
ENV SE_PORT=5555
ENV SE_HUB=
ENV SE_REMOTE_HOST=
ENV SE_LOG_LEVEL=WARNING
ENV SE_OPTS=

# selenium browser options
ENV BROWSER_NAME="internet explorer"
ENV BROWSER_VERSION=6
ENV BROWSER_PLATFORM=WINDOWS
ENV BROWSER_MAX_INSTANCES=1

# screen options
ARG SCREEN_WIDTH=1024
ARG SCREEN_HEIGHT=768
ARG SCREEN_DEPTH=32
ARG REFRESH_RATE=60

# vnc options
ENV VNC_ENABLED=1
ENV VNC_PORT=5900

# sanity checks
RUN [ -n "$PRODUCT_KEY" ]

# create and set working directory
WORKDIR /opt/qemu

# install build, compile and runtime dependencies
RUN set -ex; \
    yum update -y; \
    yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm; \
    yum install -y genisoimage tar bzip2 gzip xz p7zip p7zip-plugins; \
    yum install -y gcc make bison flex; \
    yum install -y glib2 zlib pixman libaio; \
    yum install -y glib2-devel zlib-devel pixman-devel libaio-devel; \
    yum install -y jq iproute dnsmasq samba socat iptables

# build qemu
ARG QEMU_SRC_URL=https://download.qemu.org/qemu-4.0.0.tar.xz
ARG QEMU_SRC_SHA256=13a93dfe75b86734326f8d5b475fde82ec692d5b5a338b4262aeeb6b0fa4e469
ARG QEMU_CONF_OPTS="--target-list=x86_64-softmmu --enable-linux-aio"
RUN set -ex; \
    QEMU_SRC_FILENAME=$(basename $QEMU_SRC_URL); \
    curl -# -JL -o $QEMU_SRC_FILENAME $QEMU_SRC_URL; \
    sha256sum $QEMU_SRC_FILENAME | grep -q $QEMU_SRC_SHA256; \
    mkdir -p qemu-src; \
    tar --strip-components 1 -xvf $QEMU_SRC_FILENAME -C qemu-src; \
    cd qemu-src; \
    mkdir build; \
    cd build; \
    ../configure $QEMU_CONF_OPTS; \
    make; \
    make install; \
    cd ../..; \
    rm -rf qemu-src; \
    rm -f $QEMU_SRC_FILENAME

# unpack vanilla windows iso
ARG WIN_ISO_FILE=en_win2000_pro_sp4.iso
ARG WIN_ISO_SHA256=e3816f6e80b66ff686ead03eeafffe9daf020a5e4717b8bd4736b7c51733ba22
ARG WIN_ARCH=I386
COPY files/$WIN_ISO_FILE install.org.iso
RUN set -ex; \
    7z x -o'install' install.org.iso; \
    rm install.org.iso

# install winnt.sif for unattended installation
COPY support/winnt.sif install/$WIN_ARCH/WINNT.SIF
RUN sed -i \
        -e "s!{productKey}!$PRODUCT_KEY!g" \
        -e "s!{fullName}!$FULL_NAME!g" \
        -e "s!{orgName}!$ORG_NAME!g" \
        -e "s!{computerName}!$COMPUTER_NAME!g" \
        -e "s!{screenWidth}!$SCREEN_WIDTH!g" \
        -e "s!{screenHeight}!$SCREEN_HEIGHT!g" \
        -e "s!{screenDepth}!$SCREEN_DEPTH!g" \
        -e "s!{refreshRate}!$REFRESH_RATE!g" \
        install/$WIN_ARCH/WINNT.SIF

# create provision directory
RUN mkdir -p 'install/$oem$/$1/provision'

# install java installer
COPY files/jre-6-windows-i586.exe 'install/$oem$/$1/provision'

# install selenium server
ARG SELENIUM_SERVER_URL=https://selenium-release.storage.googleapis.com/2.40/selenium-server-standalone-2.40.0.jar
ARG SELENIUM_SERVER_SHA256=ee22a1e79ce9ac49e8986c4c35ab245f5db25f591f4ec63524f0808caf11f93e
RUN set -ex; \
    curl -# -JL -o selenium-server-standalone.jar $SELENIUM_SERVER_URL; \
    sha256sum selenium-server-standalone.jar | grep -q $SELENIUM_SERVER_SHA256; \
    mv -v selenium-server-standalone.jar 'install/$oem$/$1/provision'

# install internet explorer driver for selenium server
ADD files/gdiplus_kb975337.zip 'install/$oem$/$1/provision'
ADD files/IEDriverServer_Win32_2.40.0_w2k_1.0.zip 'install/$oem$/$1/provision'

# install internet explorer
# TODO: download from https://archive.org/download/IE6SP1/IE6%20SP1.zip
ADD files/ie6sp1en.zip 'install/$oem$/$1/provision'

# install provision support files
COPY support/once.bat 'install/$oem$/$1/provision'
COPY support/start.bat 'install/$oem$/$1/provision'
COPY support/print-gateway-ip.js 'install/$oem$/$1/provision'
ADD files/reg_wxp32sp3en.zip 'install/$oem$/$1/provision'
# TODO: https://download.sysinternals.com/files/PSTools.zip
ADD files/psshutdown.zip 'install/$oem$/$1/provision'

# build windows installation iso
RUN set -ex; \
    genisoimage \
      -no-emul-boot -boot-load-seg 1984 -boot-load-size 4 -b '[BOOT]/Boot-NoEmul.img' \
      -iso-level 2 -J -l -D -N -joliet-long -relaxed-filenames \
      -o install.iso install; \
    rm -rf install

# create qemu system disk
RUN qemu-img create -f qcow2 system.qcow2 5G

# install windows in unattended mode
# NOTE: thread=single makes wxp64 stable otherwise BSOD STOP 0x000000D1 or 0x0000001E
RUN qemu-system-x86_64 \
      -accel kvm \
      -accel tcg,thread=single \
      -machine pc \
      -m $QEMU_RAM \
      -vnc :$(($VNC_PORT - 5900)) \
      -drive media=disk,file=system.qcow2,format=qcow2,if=$QEMU_DISK,cache=none,aio=native \
      -drive media=cdrom,file=install.iso \
      -boot once=d \
      -rtc base=utc \
      -usb \
      -device usb-tablet \
      -vga $QEMU_VGA \
      -nic user,model=$QEMU_NET,restrict=on

# remove not needed anymore windows installation iso
RUN rm -f install.iso

# remove not needed anymore tools
# NOTE: gzip is not removed here because removal causes an error:
#       https://github.com/rpm-software-management/yum/issues/80
RUN set -ex; \
    yum remove -y genisoimage tar bzip2 xz p7zip p7zip-plugins; \
    yum remove -y gcc make bison flex; \
    yum remove -y glib2-devel zlib-devel pixman-devel libaio-devel; \
    yum autoremove -y; \
    yum clean all; \
    rm -rf /var/cache/yum

# install runtime support files
COPY support/start-node.bat .

# install entrypoint
COPY support/entrypoint.sh .
RUN chmod +x ./entrypoint.sh

# expose ports
EXPOSE 5555
EXPOSE 5900

# healthcheck
HEALTHCHECK --start-period=180s --interval=30s --timeout=5s --retries=6 \
  CMD curl -sSL http://localhost:${SE_PORT}/wd/hub/status \
        | jq -r ".value.ready" | grep -q "true" || exit 1

# entrypoint
ENTRYPOINT ["/opt/qemu/entrypoint.sh"]
